import os
import re
import warnings
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    TypeHandler,
    PicklePersistence,
)

# –ü–æ–¥–∞–≤–ª—è–µ–º –¥–µ–ø—Ä–µ–∫–µ–π—à–Ω-–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç pkg_resources
warnings.filterwarnings("ignore", category=UserWarning, message=".*pkg_resources.*")

from db import init_db, create_profit_request, get_profit, update_final_amount, set_status, get_approved_profits_between, get_all_profits, reset_all_to_rejected, delete_all_profits, get_profits_by_user, reset_user_to_rejected, get_user_ids_by_username, ensure_user_seen, get_user_first_seen
from datetime import datetime, timedelta, timezone
from fs_storage import save_pending_profit, save_approved_profit, save_rejected_profit, purge_storage, purge_approved_and_pending, remove_files_for_profit_id
from filelock import FileLock
from zoneinfo import ZoneInfo

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID_STR = os.getenv("GROUP_ID")
ADMIN_ID_STR = os.getenv("ADMIN_ID")
APPROVED_STICKER_ID = os.getenv("APPROVED_STICKER_ID")

GROUP_ID = int(GROUP_ID_STR) if GROUP_ID_STR else None
ADMIN_ID = int(ADMIN_ID_STR) if ADMIN_ID_STR else None

if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –≤ .env")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ /profit
ASK_AMOUNT = 1
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
SUGGEST_WAIT_TEXT = 2


def fmt_uah(value: float) -> str:
    s = format(value, ",.2f")  # "1,234.50"
    s = s.replace(",", " ").replace(".", ",")
    int_part, sep, frac = s.partition(",")
    if frac:
        frac = frac.rstrip("0")
        s = f"{int_part},{frac}" if frac else int_part
    return f"{s} ‚Ç¥"

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def make_period_keyboard(prefix: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"{prefix}:week"),
            InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data=f"{prefix}:month"),
            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data=f"{prefix}:all"),
        ]
    ])


def make_start_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç", callback_data="start_profit"),
            InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="start:my"),
        ],
        [
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="start:stats"),
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="start:help"),
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", callback_data="start:suggest"),
        ],
    ])


def make_admin_moderation_keyboard(req_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{req_id}"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{req_id}"),
        ],
        [
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data=f"edit:{req_id}"),
        ],
    ])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–¥–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    user = update.effective_user
    ensure_user_seen(user.id, user.username, user.first_name)

    is_admin = update.effective_user.id == ADMIN_ID
    intro = (
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É.\n"
        "–ú—ã —Ä–∞—Å—Ç—ë–º –≤–º–µ—Å—Ç–µ, –¥–µ–ª–∏–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç—ã, —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π.\n\n"
        "–ù–∏–∂–µ ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:"
    )
    common = (
        "\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:\n"
        "‚Ä¢ /profit ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)\n"
        "‚Ä¢ /my ‚Äî –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ)\n"
        "‚Ä¢ /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ)\n"
        "‚Ä¢ /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    if is_admin:
        admin = (
            "\n\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "‚Ä¢ /reset_profits ‚Äî –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏—Ç—ã\n"
            "‚Ä¢ /reset_user_profits <user_id –∏–ª–∏ @username> ‚Äî –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        text = intro + common + admin
    else:
        note = "\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–∫—Ä—ã—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
        text = intro + common + note
    # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ (reply keyboard)
    if update.message and update.effective_chat.type == "private":
        reply_kb = ReplyKeyboardMarkup(
            [
                [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç"), KeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("–ü–æ–º–æ—â—å")],
                [KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")],
            ],
            resize_keyboard=True,
        )
        try:
            await update.message.reply_text("–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞:", reply_markup=reply_kb)
        except Exception:
            pass
    keyboard = make_start_keyboard()
    await update.message.reply_text(text, reply_markup=keyboard)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ê–Ω—Ç–∏-—Å–ø–∞–º: –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
    now = datetime.now().timestamp()
    last_ts = context.chat_data.get("stats_cooldown")
    if last_ts and now - last_ts < 3:
        return
    context.chat_data["stats_cooldown"] = now

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–µ–¥–µ–ª—é
    period = "week"
    text = build_stats_text(period)
    keyboard = make_period_keyboard("stats")
    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    else:
        # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ stats() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–∑ callback
        query = update.callback_query
        await context.bot.send_message(chat_id=query.message.chat.id, text=text, reply_markup=keyboard)


def _period_bounds(period: str):
    now = datetime.utcnow()
    if period == "week":
        start = now - timedelta(days=7)
        return start.isoformat(), None
    elif period == "month":
        start = now - timedelta(days=30)
        return start.isoformat(), None
    else:
        return None, None


def build_stats_text(period: str) -> str:
    start_iso, end_iso = _period_bounds(period)
    rows = get_approved_profits_between(start_iso, end_iso)
    if not rows:
        title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é" if period == "week" else ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü" if period == "month" else "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
        return f"{title}\n\n–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤."

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    agg = {}
    total = 0.0
    for user_id, username, first_name, final_amount, approved_at in rows:
        if final_amount is None:
            continue
        total += final_amount
        name = f"@{username}" if username else (first_name or str(user_id))
        entry = agg.get(user_id)
        if not entry:
            agg[user_id] = {"name": name, "sum": final_amount, "count": 1}
        else:
            entry["sum"] += final_amount
            entry["count"] += 1

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    items = sorted(agg.values(), key=lambda x: x["sum"], reverse=True)

    title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é" if period == "week" else ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü" if period == "month" else "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
    lines = [title, ""]
    prev_sum = None
    prev_rank = 0
    idx = 0
    for item in items:
        idx += 1
        cur_sum = round(item['sum'], 2)
        if prev_sum is None or cur_sum != prev_sum:
            rank = idx
            prev_rank = rank
            prev_sum = cur_sum
        else:
            rank = prev_rank
        # –ó–æ–ª–æ—Ç–æ/—Å–µ—Ä–µ–±—Ä–æ/–±—Ä–æ–Ω–∑–∞ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —Ç–æ–ø‚Äë3, –¥–∞–ª—å—à–µ ‚Äî –Ω–æ–º–µ—Ä–∞
        medal = "ü•á" if rank == 1 else ("ü•à" if rank == 2 else ("ü•â" if rank == 3 else ""))
        if medal:
            prefix = f"{medal}"
        else:
            prefix = f"{rank}."
        lines.append(f"{prefix} {item['name']} ‚Äî {fmt_uah(item['sum'])}")
    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ: {fmt_uah(total)}")
    return "\n".join(lines)


async def profit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–¥–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    user = update.effective_user
    ensure_user_seen(user.id, user.username, user.first_name)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚è∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", callback_data="profit_set_time")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profit_cancel")]
    ])
    prompt_text = (
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞</b>\n\n"
        "üìù –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö:\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏\n\n"
        "üìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>1000</code>\n"
        "‚Ä¢ <code>1500.50</code>\n"
        "‚Ä¢ <code>1 500</code>\n\n"
        "‚ö°Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
    )
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ, —Ç–∞–∫ –∏ –ø–æ callback
    if update.message:
        msg = await update.message.reply_text(
            prompt_text,
            parse_mode='HTML',
            disable_notification=True,
            reply_markup=keyboard,
        )
        chat_id = update.effective_chat.id
    else:
        query = update.callback_query
        await query.answer()
        msg = await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=prompt_text,
            parse_mode='HTML',
            disable_notification=True,
            reply_markup=keyboard,
        )
        chat_id = query.message.chat.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    context.user_data["profit_session_message_id"] = msg.message_id
    context.user_data["profit_chat_id"] = chat_id
    return ASK_AMOUNT


async def profit_cancel_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    try:
        await query.edit_message_text(
            "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /profit."
        )
    except Exception:
        try:
            await context.bot.send_message(
                chat_id=query.message.chat.id,
                text="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /profit.",
            )
        except Exception:
            pass
    context.user_data.pop("profit_session_message_id", None)
    return ConversationHandler.END


async def profit_set_time_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
    context.user_data["profit_time_label"] = datetime.utcnow().isoformat()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚è∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è", callback_data="profit_set_time")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profit_cancel")]
    ])
    prompt_text = (
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏—Ç–∞</b>\n\n"
        "‚úÖ <b>–í—Ä–µ–º—è –æ—Ç–º–µ—á–µ–Ω–æ!</b>\n\n"
        "üìù –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö:\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏\n\n"
        "üìã <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>1000</code>\n"
        "‚Ä¢ <code>1500.50</code>\n"
        "‚Ä¢ <code>1 500</code>\n\n"
        "‚ö°Ô∏è –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"
    )
    try:
        await query.edit_message_text(text=prompt_text, parse_mode='HTML', reply_markup=keyboard)
    except Exception:
        try:
            await context.bot.send_message(chat_id=query.message.chat.id, text=prompt_text, parse_mode='HTML', reply_markup=keyboard)
        except Exception:
            pass
    return ASK_AMOUNT

async def profit_timeout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ê–≤—Ç–æ-—Ç–∞–π–º–∞—É—Ç: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥, —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    session_msg_id = context.user_data.get("profit_session_message_id")
    chat_id = context.user_data.get("profit_chat_id") or (update.effective_chat.id if update and update.effective_chat else None)
    text = "–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ. –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profit."
    if session_msg_id and chat_id:
        try:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=session_msg_id, text=text)
        except Exception:
            try:
                await context.bot.send_message(chat_id=chat_id, text=text)
            except Exception:
                pass
    elif chat_id:
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
        except Exception:
            pass
    context.user_data.pop("profit_session_message_id", None)
    context.user_data.pop("profit_chat_id", None)
    return ConversationHandler.END


async def profit_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /cancel
    session_msg_id = context.user_data.get("profit_session_message_id")
    chat_id = context.user_data.get("profit_chat_id") or (update.effective_chat.id if update and update.effective_chat else None)
    text = "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profit."
    if session_msg_id and chat_id:
        try:
            await context.bot.edit_message_text(chat_id=chat_id, message_id=session_msg_id, text=text)
        except Exception:
            try:
                await context.bot.send_message(chat_id=chat_id, text=text)
            except Exception:
                pass
    elif chat_id:
        try:
            await context.bot.send_message(chat_id=chat_id, text=text)
        except Exception:
            pass
    context.user_data.pop("profit_session_message_id", None)
    context.user_data.pop("profit_chat_id", None)
    return ConversationHandler.END


async def profit_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    session_msg_id = context.user_data.get("profit_session_message_id")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profit_cancel")]
    ])
    # –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (—Ü–µ–ª–æ–µ –∏–ª–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ), –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
    match = re.search(r"(\d[\d\s]*([\.,]\d{1,2})?)", text)
    if not match:
        error_text = (
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\n"
            "üîç –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
            "üìã <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>1500</code>\n"
            "‚Ä¢ <code>2000.50</code>\n"
            "‚Ä¢ <code>1 500</code>\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        if session_msg_id:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=session_msg_id,
                text=error_text,
                parse_mode='HTML',
                reply_markup=keyboard,
            )
        else:
            await update.message.reply_text(
                error_text,
                parse_mode='HTML',
                reply_markup=keyboard,
            )
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception:
            pass
        return ASK_AMOUNT

    amount_str = match.group(1).replace(" ", "").replace(',', '.')
    try:
        amount = float(amount_str)
    except ValueError:
        error_text = (
            "‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞</b>\n\n"
            "üî¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n"
            "üìã <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>1500</code>\n"
            "‚Ä¢ <code>2000.50</code>\n"
            "‚Ä¢ <code>1 500</code>\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        if session_msg_id:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=session_msg_id,
                text=error_text,
                parse_mode='HTML',
                reply_markup=keyboard,
            )
        else:
            await update.message.reply_text(
                error_text,
                parse_mode='HTML',
                reply_markup=keyboard,
            )
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception:
            pass
        return ASK_AMOUNT

    if amount <= 0:
        error_text = (
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞</b>\n\n"
            "‚ö†Ô∏è –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.\n\n"
            "üìã <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>1500</code>\n"
            "‚Ä¢ <code>2000.50</code>\n"
            "‚Ä¢ <code>1 500</code>\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        if session_msg_id:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=session_msg_id,
                text=error_text,
                parse_mode='HTML',
                reply_markup=keyboard,
            )
        else:
            await update.message.reply_text(error_text, parse_mode='HTML', reply_markup=keyboard)
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except Exception:
            pass
        return ASK_AMOUNT

    amount = round(amount, 2)

    note = text
    user = update.effective_user

    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É –≤ –ë–î
    profit_id = create_profit_request(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        amount=amount,
        note=note,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ pending
    row = get_profit(profit_id)
    if row:
        save_pending_profit(row)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É/–≤ –≥—Ä—É–ø–ø—É –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    admin_keyboard = make_admin_moderation_keyboard(profit_id)
    name = f"@{user.username}" if user.username else (user.first_name or str(user.id))
    time_iso = context.user_data.get("profit_time_label") or (row[8] if row else None)
    time_str = f" ‚Ä¢ –≤—Ä–µ–º—è: {format_time_local(time_iso)}" if time_iso else ""
    admin_text = f"–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏—Ç –æ—Ç {name}: {fmt_uah(amount)}{time_str}"
    target_sent = False
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É
    if ADMIN_ID:
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text, reply_markup=admin_keyboard)
            target_sent = True
        except Exception:
            pass
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É (fallback)
    if not target_sent and GROUP_ID:
        try:
            await context.bot.send_message(chat_id=GROUP_ID, text=admin_text, reply_markup=admin_keyboard)
            target_sent = True
        except Exception:
            pass
    # –ï—Å–ª–∏ –Ω–∏–∫—É–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not target_sent:
        try:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GROUP_ID/ADMIN_ID.")
        except Exception:
            pass

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ)
    if session_msg_id:
        try:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=session_msg_id,
                text=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç {fmt_uah(amount)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            await update.message.reply_text(
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç {fmt_uah(amount)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
            )
    else:
        await update.message.reply_text(
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç {fmt_uah(amount)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
        )

    # –ß–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("profit_session_message_id", None)
    context.user_data.pop("profit_chat_id", None)
    context.user_data.pop("profit_time_label", None)
    return ConversationHandler.END


async def admin_edit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É, –º—ã –æ–∂–∏–¥–∞–µ–º id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    editing_id = context.user_data.get("editing_request_id")
    if not editing_id:
        return
    text = update.message.text.strip()
    # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    match = re.match(r"^([0-9]+(?:[\s,\.][0-9]{3})*(?:[\.,][0-9]+)?|[0-9]+)$", text)
    if not match:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    amount_str = match.group(1).replace(" ", "").replace(',', '.')
    try:
        amount = float(amount_str)
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    amount = round(amount, 2)

    update_final_amount(editing_id, amount)
    row = get_profit(editing_id)
    if row:
        save_approved_profit(row)

    context.user_data.pop("editing_request_id", None)

    keyboard = make_admin_moderation_keyboard(editing_id)
    await update.message.reply_text(
        f"–ó–∞—è–≤–∫–∞ #{editing_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {fmt_uah(amount)}",
        reply_markup=keyboard,
    )


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    if data == "start_profit":
        await profit_command(update, context)
        return
    if data == "start:stats":
        msg = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats —Ç–∞–º"
        try:
            await context.bot.send_message(chat_id=query.message.chat.id, text=msg)
        except Exception:
            await query.edit_message_text(text=msg)
        return
    if data == "start:help":
        await help_command(update, context)
        return
    if data == "start:my":
        await my_command(update, context)
        return
    # –£–¥–∞–ª–µ–Ω–æ: if data == "start:suggest": await suggest_start_conv(update, context); return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–µ—Ä–∏–æ–¥—ã
    if data.startswith("stats:"):
        period = data.split(":", 1)[1]
        text = build_stats_text(period)
        keyboard = make_period_keyboard("stats")
        try:
            await query.edit_message_text(text=text, reply_markup=keyboard)
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            pass
        return

    # –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–µ—Ä–∏–æ–¥—ã
    if data.startswith("my:"):
        period = data.split(":", 1)[1]
        user_id = update.effective_user.id
        text = build_my_text(user_id, period)
        keyboard = make_period_keyboard("my")
        try:
            await query.edit_message_text(text=text, reply_markup=keyboard)
        except Exception:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            pass
        return

    # –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
    if data.startswith("approve:") or data.startswith("reject:") or data.startswith("edit:"):
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
        if update.effective_user.id != ADMIN_ID:
            try:
                await query.answer(text="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
            except Exception:
                pass
            return
        action, profit_id_str = data.split(":", 1)
        try:
            profit_id = int(profit_id_str)
        except ValueError:
            await context.bot.send_message(chat_id=query.message.chat.id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏—Ç–∞.")
            return

        if action == "edit":
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã (–≤ –ª–∏—á–∫–µ)
            context.user_data["editing_request_id"] = profit_id
            try:
                await context.bot.send_message(chat_id=update.effective_user.id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –ø—Ä–æ—Ñ–∏—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.")
            except Exception:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É, –ø–æ–¥—Å–∫–∞–∂–µ–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
                await context.bot.send_message(chat_id=query.message.chat.id, text="–û—Ç–∫—Ä–æ–π—Ç–µ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É.")
            return

        # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        row = get_profit(profit_id)
        if not row:
            await context.bot.send_message(chat_id=query.message.chat.id, text=f"–ü—Ä–æ—Ñ–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user_id = row[1]
        final_amount = row[5] or row[4] or 0.0

        if action == "approve":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            set_status(profit_id, "approved", approver_id=update.effective_user.id)
            row2 = get_profit(profit_id)
            try:
                save_approved_profit(row2)
            except Exception:
                pass

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–∫–µ
            dm_text = f"–í–∞—à –ø—Ä–æ—Ñ–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {fmt_uah(final_amount)} üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
            try:
                await context.bot.send_message(chat_id=user_id, text=dm_text)
                if APPROVED_STICKER_ID:
                    try:
                        await context.bot.send_sticker(chat_id=user_id, sticker=APPROVED_STICKER_ID)
                    except Exception:
                        pass
            except Exception:
                pass


            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞/–≥—Ä—É–ø–ø—ã
            name = f"@{row[2]}" if row[2] else (row[3] or str(user_id))
            time_str = f" ‚Ä¢ –≤—Ä–µ–º—è: {format_time_local(row[8])}" if row and row[8] else ""
            admin_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø—Ä–æ—Ñ–∏—Ç {fmt_uah(final_amount)} –æ—Ç {name}{time_str}"
            try:
                await query.edit_message_text(text=admin_text)
            except Exception:
                await context.bot.send_message(chat_id=query.message.chat.id, text=admin_text)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∏—Ç–æ–≥ –≤ –≥—Ä—É–ø–ø–µ
            try:
                if GROUP_ID:
                    name = f"@{row[2]}" if row[2] else (row[3] or str(user_id))
                    group_text = f"üí∏ –ü–ª—é—Å –ø—Ä–æ—Ñ–∏—Ç –æ—Ç {name}: {fmt_uah(final_amount)} ‚Äî –∫—Ä–∞—Å–∞–≤–µ—Ü!"
                    await context.bot.send_message(chat_id=GROUP_ID, text=group_text)

                    sticker_id = os.getenv('GROUP_STICKER_ID_MAMONT', '').strip()
                    if sticker_id:
                        try:
                            await context.bot.send_sticker(chat_id=GROUP_ID, sticker=sticker_id)
                        except Exception as e:
                            print(f"[warn] Failed to send sticker to group: {e}")

                    follow_up = "ü¶£ –ú–∞–º–æ–Ω—Ç –≤ –ª–æ–≤—É—à–∫–µ! –≠—Ç–æ –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –∑–∞–ª–∏–≤, –Ω–æ –Ω—É–∂–Ω–æ –µ—â—ë. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ö–æ—Ç—É! ü™§"
                    await context.bot.send_message(chat_id=GROUP_ID, text=follow_up)
            except Exception:
                pass
            return

        if action == "reject":
            set_status(profit_id, "rejected", approver_id=update.effective_user.id)
            row2 = get_profit(profit_id)
            try:
                save_rejected_profit(row2)
            except Exception:
                pass

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–∫–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                dm_text = f"–í–∞—à –ø—Ä–æ—Ñ–∏—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω: {fmt_uah(final_amount)}."
                await context.bot.send_message(chat_id=user_id, text=dm_text)
            except Exception:
                pass

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞/–≥—Ä—É–ø–ø—ã –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ –∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            name = f"@{row[2]}" if row[2] else (row[3] or str(user_id))
            time_str = f" ‚Ä¢ –≤—Ä–µ–º—è: {format_time_local(row[8])}" if row and row[8] else ""
            admin_text = f"‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω –ø—Ä–æ—Ñ–∏—Ç {fmt_uah(final_amount)} –æ—Ç {name}{time_str}"
            try:
                await query.edit_message_text(text=admin_text)
            except Exception:
                await context.bot.send_message(chat_id=query.message.chat.id, text=admin_text)
            return


async def reset_profits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –≤ rejected
    reset_all_to_rejected()
    purge_approved_and_pending()
    await update.message.reply_text("–í—Å–µ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ.")


async def reset_user_profits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = getattr(context, "args", [])
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset_user_profits <user_id –∏–ª–∏ @username>")
        return

    arg = args[0].strip()
    target_user_id = None
    target_username = None

    if arg.startswith("@"):
        target_username = arg[1:]
        ids = get_user_ids_by_username(target_username)
        if not ids:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username}.")
            return
        target_user_id = ids[0]
    else:
        try:
            target_user_id = int(arg)
        except ValueError:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ) –∏–ª–∏ @username.")
            return

    rows = get_profits_by_user(target_user_id)
    if not rows:
        await update.message.reply_text("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç.")
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—ë –≤ rejected –≤ –ë–î
    reset_user_to_rejected(target_user_id)

    # –ß–∏—Å—Ç–∏–º —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    for row in rows:
        profit_id = row[0]
        remove_files_for_profit_id(profit_id)

    await update.message.reply_text("–ü—Ä–æ—Ñ–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_admin = update.effective_user.id == ADMIN_ID
    is_private = update.effective_chat.type == "private"
    lines = ["–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:"]
    if is_private:
        lines += [
            "",
            "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            "‚Ä¢ /start ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω",
            "‚Ä¢ /profit ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç",
            "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É",
            "‚Ä¢ /my ‚Äî –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "‚Ä¢ /suggest ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é",
        ]
        if is_admin:
            lines += [
                "",
                "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                "‚Ä¢ /reset_profits ‚Äî –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏—Ç—ã",
                "‚Ä¢ /reset_user_profits <user_id –∏–ª–∏ @username> ‚Äî –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            ]
        lines += [
            "",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats —Ç–∞–º",
        ]
    else:
        lines += [
            "",
            "–ì—Ä—É–ø–ø–∞:",
            "‚Ä¢ /stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É; –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ ‚Äò–ó–∞ –Ω–µ–¥–µ–ª—é‚Äô, ‚Äò–ó–∞ –º–µ—Å—è—Ü‚Äô, ‚Äò–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è‚Äô",
        ]
    text = "\n".join(lines)
    if update.message:
        await update.message.reply_text(text)
    else:
        query = update.callback_query
        try:
            await context.bot.send_message(chat_id=query.message.chat.id, text=text)
        except Exception:
                try:
                    await query.edit_message_text(text=text)
                except Exception:
                    pass


async def suggest_start_conv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_seen(user.id, user.username, user.first_name)
    prompt = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel."
    if update.message:
        await update.message.reply_text(prompt)
    else:
        query = update.callback_query
        await query.answer()
        try:
            await context.bot.send_message(chat_id=query.message.chat.id, text=prompt)
        except Exception:
            try:
                await query.edit_message_text(text=prompt)
            except Exception:
                pass
    return SUGGEST_WAIT_TEXT

async def suggest_receive_conv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    user = update.effective_user
    if not text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        return SUGGEST_WAIT_TEXT
    admin_text = (
        f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
        f"–û—Ç: {user.first_name or ''} (@{user.username or '‚Äî'}, id={user.id})\n\n"
        f"{text}"
    )
    if ADMIN_ID:
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
        except Exception:
            pass
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return ConversationHandler.END

async def suggest_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def suggest_start_inside_profit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["awaiting_suggestion"] = True
    prompt = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤–≤–æ–¥—É —Å—É–º–º—ã –ø—Ä–æ—Ñ–∏—Ç–∞."
    await update.message.reply_text(prompt)
    return ASK_AMOUNT

async def route_private_text_in_profit_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_suggestion"):
        text = (update.message.text or "").strip()
        user = update.effective_user
        context.user_data["awaiting_suggestion"] = False
        if not text:
            await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
            context.user_data["awaiting_suggestion"] = True
            return ASK_AMOUNT
        admin_text = (
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n"
            f"–û—Ç: {user.first_name or ''} (@{user.username or '‚Äî'}, id={user.id})\n\n"
            f"{text}"
        )
        if ADMIN_ID:
            try:
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
            except Exception:
                pass
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í–µ—Ä–Ω—ë–º—Å—è –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç.")
        return ASK_AMOUNT
    return await profit_receive(update, context)


async def stats_private_notice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats —Ç–∞–º"
    if update.message:
        await update.message.reply_text(msg)
    else:
        query = update.callback_query
        try:
            await context.bot.send_message(chat_id=query.message.chat.id, text=msg)
        except Exception:
            try:
                await query.edit_message_text(text=msg)
            except Exception:
                pass


def _period_bounds(period: str):
    now = datetime.utcnow()
    if period == "week":
        start = now - timedelta(days=7)
        return start.isoformat(), now.isoformat()
    elif period == "month":
        start = now - timedelta(days=30)
        return start.isoformat(), now.isoformat()
    else:
        return None, None


def build_my_text(user_id: int, period: str) -> str:
    start_iso, end_iso = _period_bounds(period)
    rows = get_profits_by_user(user_id)
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    first_seen_iso = get_user_first_seen(user_id)
    join_line = None
    if first_seen_iso:
        try:
            dt0 = datetime.fromisoformat(first_seen_iso)
            days = (datetime.utcnow() - dt0).days
            date_str = dt0.strftime("%Y-%m-%d")
            join_line = f"–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {date_str} ‚Ä¢ –≤—Å–µ–≥–æ –≤ –±–æ—Ç–µ: {days} –¥–Ω."
        except Exception:
            pass
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É approved_at
    approved_rows = []
    for row in rows:
        status = row[7]
        approved_at = row[9]
        final_amount = row[5]
        if status != "approved" or final_amount is None:
            continue
        if start_iso and approved_at and approved_at < start_iso:
            continue
        if end_iso and approved_at and approved_at > end_iso:
            continue
        approved_rows.append(row)
    title = (
        "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é" if period == "week"
        else ("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü" if period == "month" else "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
    )
    lines = [title, ""]
    if join_line:
        lines.append(join_line)
        lines.append("")
    if not approved_rows:
        lines.append("–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤.")
        return "\n".join(lines)
    total = 0.0
    for row in approved_rows:
        total += row[5] or 0.0
    # –¢–æ–ø-5 –ø–æ —Å—É–º–º–µ
    top = sorted(approved_rows, key=lambda r: (r[5] or 0.0), reverse=True)[:5]
    lines.append(f"–ò—Ç–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {fmt_uah(total)}")
    lines.append("–¢–æ–ø-5 –ø—Ä–æ—Ñ–∏—Ç–æ–≤:")
    for idx, r in enumerate(top, start=1):
        amt = r[5] or 0.0
        dt = r[9]
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        date_str = dt
        if dt:
            try:
                dt_obj = datetime.fromisoformat(dt.replace('Z', '+00:00'))
                date_str = dt_obj.strftime("%Y-%m-%d")
            except Exception:
                pass
        lines.append(f"{idx}. {fmt_uah(amt)} ‚Äî {date_str}")
    return "\n".join(lines)


async def my_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–¥–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    user = update.effective_user
    ensure_user_seen(user.id, user.username, user.first_name)
    user_id = update.effective_user.id
    rows = get_profits_by_user(user_id)
    if not rows:
        msg = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏—Ç."
        if update.message:
            await update.message.reply_text(msg)
        else:
            query = update.callback_query
            try:
                await context.bot.send_message(chat_id=query.message.chat.id, text=msg)
            except Exception:
                try:
                    await query.edit_message_text(text=msg)
                except Exception:
                    pass
        return
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –∏ –¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    text = build_my_text(user_id, period="all")
    keyboard = make_period_keyboard("my")
    if update.message:
        await update.message.reply_text(text, reply_markup=keyboard)
    else:
        query = update.callback_query
        try:
            await context.bot.send_message(chat_id=query.message.chat.id, text=text, reply_markup=keyboard)
        except Exception:
            try:
                await query.edit_message_text(text=text, reply_markup=keyboard)
            except Exception:
                pass


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ–π echo-–æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.reply_text(update.message.text)


def format_time_local(iso_str: str) -> str:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ISO-–¥–∞—Ç—É (UTC) –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    try:
        dt = datetime.fromisoformat(iso_str)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        local_tz = ZoneInfo(os.getenv("TIMEZONE", "Europe/Warsaw"))
        local_dt = dt.astimezone(local_tz)
        return local_dt.strftime("%d.%m %H:%M")
    except Exception:
        try:
            local_dt = datetime.now(ZoneInfo(os.getenv("TIMEZONE", "Europe/Warsaw")))
            return local_dt.strftime("%d.%m %H:%M")
        except Exception:
            return datetime.utcnow().strftime("%d.%m %H:%M") + " UTC"


def main() -> None:
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ lock-—Ñ–∞–π–ª
    lock_path = os.path.join(os.path.dirname(__file__), "bot.lock")
    with FileLock(lock_path):
        init_db()

        # –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–æ–≤
        state_path = os.path.join(os.path.dirname(__file__), "bot_state.pkl")
        persistence = PicklePersistence(filepath=state_path)
        application = Application.builder().token(BOT_TOKEN).persistence(persistence).build()

        # –î–∏–∞–ª–æ–≥ /profit (persistent)
        profit_conv = ConversationHandler(
            entry_points=[
                CommandHandler("profit", profit_command, filters=filters.ChatType.PRIVATE),
                CallbackQueryHandler(profit_command, pattern="^start_profit$"),
                MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç$"), profit_command),
            ],
            states={
                ASK_AMOUNT: [
                    MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏—Ç$"), profit_command),
                    MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), my_command),
                    MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–ü–æ–º–æ—â—å$"), help_command),
                    MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats_private_notice),
                    MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é$"), suggest_start_inside_profit),
                    MessageHandler(
                        filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND,
                        route_private_text_in_profit_dialog,
                    ),
                    CallbackQueryHandler(profit_cancel_button, pattern="^profit_cancel$"),
                    CallbackQueryHandler(profit_set_time_button, pattern="^profit_set_time$"),
                    # –£–¥–∞–ª–µ–Ω–æ: CallbackQueryHandler(handle_callback, pattern="^(start:(help|stats|my|suggest)|stats:(week|month|all)|my:(week|month|all))$")
                ],
                ConversationHandler.TIMEOUT: [TypeHandler(Update, profit_timeout)],
            },
            fallbacks=[
                CommandHandler("cancel", profit_cancel, filters=filters.ChatType.PRIVATE),
                CallbackQueryHandler(profit_cancel_button, pattern="^profit_cancel$"),
            ],
            conversation_timeout=600,
            name="profit",
            persistent=True,
            per_message=True,
        )

        # –î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (persistent)
        suggest_conv = ConversationHandler(
            entry_points=[
                CommandHandler("suggest", suggest_start_conv, filters=filters.ChatType.PRIVATE),
                CallbackQueryHandler(suggest_start_conv, pattern="^start:suggest$"),
                MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é$"), suggest_start_conv),
            ],
            states={
                SUGGEST_WAIT_TEXT: [
                    MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, suggest_receive_conv),
                    CommandHandler("cancel", suggest_cancel_command),
                ]
            },
            fallbacks=[
                CommandHandler("cancel", suggest_cancel_command),
            ],
            conversation_timeout=600,
            name="suggest",
            persistent=True,
            per_message=True,
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE))
        application.add_handler(CommandHandler("stats", stats, filters=filters.ChatType.GROUPS))
        application.add_handler(CommandHandler("reset_profits", reset_profits_command, filters=filters.ChatType.PRIVATE))
        application.add_handler(CommandHandler("reset_user_profits", reset_user_profits_command, filters=filters.ChatType.PRIVATE))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("my", my_command, filters=filters.ChatType.PRIVATE))
        application.add_handler(profit_conv)
        application.add_handler(suggest_conv)
        # Reply-–∫–Ω–æ–ø–∫–∏ –≤ –ª–∏—á–∫–µ: –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ü–æ–º–æ—â—å, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        application.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), my_command))
        application.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–ü–æ–º–æ—â—å$"), help_command))
        application.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & filters.Regex("^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats_private_notice))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, admin_edit_amount))
        application.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, echo))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()